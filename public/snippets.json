{
	"tags": [
		"frivolous",
		"pun",
		"puzzle",
		"quine",
		"sketch",
		"testing",
		"useful",
		"useless",
		"wellbeing",
		"wtf",
		"wuzzle",
		"yolo"
	],
	"snippets": [
		{
			"name": ".js",
			"code": "",
			"tags": []
		},
		{
			"name": "all-the-chars.js",
			"code": "const allTheChars = [];\n\nlet i = 0;\nlet next = '';\n\nwhile (!allTheChars.includes(next)) {\n  allTheChars.push(next);\n  next = String.fromCharCode(i++);\n}\n\nconsole.log(allTheChars.join(''));\n",
			"tags": []
		},
		{
			"name": "callout-stack.js",
			"code": "const calloutStack = (msg = '') =>\n  eval(\n    msg\n      .split('')\n      .reduce((acc, next) => `(function ${next}() { ${acc} })()`, `\"${msg}\"()`),\n  );\n\ncalloutStack('jenga');\n\n// tags: useless\n",
			"tags": [
				"useless"
			]
		},
		{
			"name": "cest-pas-faux.js",
			"code": "console.assert(this !== false, \"c'est pas faux!\");\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "code-is-text.css",
			"code": ".token {\n  color: black !important;\n}\n",
			"tags": []
		},
		{
			"name": "deep-compare.mjs",
			"code": "export const deepCompare = (actual, expect) => {\n  return (\n    actual === expect ||\n    Object.is(actual, expect) ||\n    (Object(actual) === actual &&\n      Object(expect) === expect &&\n      ((Array.isArray(actual) &&\n        Array.isArray(expect) &&\n        actual.length === expect.length &&\n        expect.every((expect, index) => deepCompare(actual[index], expect))) ||\n        (Object.keys(actual).length === Object.keys(expect).length &&\n          Object.keys(expect).every((key) =>\n            deepCompare(actual[key], expect[key]),\n          ))))\n  );\n};\n\nexport default deepCompare;\n\n// tags: useful, testing\n",
			"tags": [
				"useful",
				"testing"
			]
		},
		{
			"name": "describe-it.mjs",
			"code": "export const describe = (name = '', testFunction = () => {}) => {\n  console.group(`%c${name}`, 'font-weight: bold;');\n  try {\n    testFunction();\n  } catch (err) {\n    console.error('%cSUITE ERROR:', 'font-weight: bold;', err);\n  }\n  console.groupEnd();\n};\n\nexport const it = (name = '', testFunction = () => {}) => {\n  const out = Object.assign({}, console);\n  const callOuts = [];\n  Object.keys(console).forEach(\n    (key) => (console[key] = (...args) => callOuts.push({ key, args })),\n  );\n  let thrown = null;\n  try {\n    testFunction();\n  } catch (err) {\n    thrown = err;\n  }\n  if (thrown)\n    out.groupCollapsed(`%c✖ FAIL: ${name}`, 'font-weight: bold; color: red;');\n  else\n    out.groupCollapsed(`%c√ PASS: ${name}`, 'font-weight: bold; color: green;');\n  callOuts.forEach((callOut) => out[callOut.key](...callOut.args));\n  thrown && out.error(thrown);\n  out.groupEnd();\n  Object.assign(console, out);\n};\n\nexport default { describe, it };\n\n// tags: testing\n",
			"tags": [
				"testing"
			]
		},
		{
			"name": "dna.js",
			"code": "const WIDTH = 30;\nconst STEP = 0.08;\n\nconst coordinate = (num, phase = 0) =>\n  Math.round(Math.sin(num + phase) * WIDTH) + WIDTH;\n\nlet a = 0;\nlet b = WIDTH;\n\nconst strand = setInterval(() => {\n  const cA = coordinate((a += STEP));\n  const cB = coordinate((b += STEP), WIDTH / 2);\n  console.log(\n    `${Array((cA < cB ? cA : cB) + 1).join(' ')}{|${Array(\n      Math.abs(cB - cA),\n    ).join('=')}|}`,\n  );\n  if (a / b > 0.3) {\n    clearInterval(strand);\n  }\n}, 30);\n\n// tags: sketch\n",
			"tags": [
				"sketch"
			]
		},
		{
			"name": "do-without.js",
			"code": "const out = { eye_roll: '(◔_◔)' };\n\ndo {\n  with (out) {\n    alert(eye_roll);\n  }\n} while (null);\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "existential-void.js",
			"code": "/*\n  A: I disappear and leave you.\n  E: You didn’t disappear.\n  A: Well, I did and then appeared again. The void does not accept me, sir.\n*/\n\nconsole.assert(void 'me', 'the void accepts');\n",
			"tags": []
		},
		{
			"name": "expect.mjs",
			"code": "import deepCompare from './deep-compare.mjs';\n\nexport const expect = (first) => {\n  return {\n    toDeepEqual(second) {\n      if (!deepCompare(first, second)) {\n        console.log('%cFirst Thing:', 'font-weight: bold;', first);\n        console.log('%cSecond Thing:', 'font-weight: bold;', second);\n        throw new Error('the first thing did not deep equal the second thing.');\n      }\n    },\n    toStrictEqual(second) {\n      if (first !== second) {\n        console.log('%cFirst Thing:', 'font-weight: bold;', first);\n        console.log('%cSecond Thing:', 'font-weight: bold;', second);\n        throw new Error(\n          'the first thing did not strictly equal the second thing',\n        );\n      }\n    },\n  };\n};\n\nexport default expect;\n\n// tags: testing\n",
			"tags": [
				"testing"
			]
		},
		{
			"name": "fake-it-till-you-make-it.mjs",
			"code": "import { steamroll } from './steamroll.mjs';\n\nfetch('./python-by-any-other-name.js')\n  .then((res) => res.text())\n  .then(steamroll)\n  .then(console.log)\n  .catch(console.error);\n\n// tags: frivolous\n",
			"tags": [
				"frivolous"
			]
		},
		{
			"name": "goto-ish.js",
			"code": "var wants_a_compliment = confirm('do you want a compliment?');\n\ncompliment: {\n  insult: {\n    if (wants_a_compliment) break insult;\n    alert('you own a store');\n  }\n  if (!wants_a_compliment) break compliment;\n  alert('well done, good work');\n}\n",
			"tags": []
		},
		{
			"name": "gotta-fetch-em-all.js",
			"code": "fetch(\n  'https://raw.githubusercontent.com/PokeAPI/pokeapi/master/data/v2/csv/pokemon.csv',\n)\n  .then((res) => res.text())\n  .then((csv) =>\n    csv\n      .split('\\n')\n      .slice(1)\n      .map((line) => line.split(',')[1])\n      .join('\\n'),\n  )\n  .then(console.log)\n  .catch(console.error);\n",
			"tags": []
		},
		{
			"name": "heartbreak.js",
			"code": "heart: {\n  break heart;\n}\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "in-one-ear.js",
			"code": "// ... out the other\n\n// prettier-ignore\n{\n\n\n\n          '   '\n      '           '\n    '    (*) (*)    '\nalert(             prompt())\n    '       ^       '\n    '   \\_______/   '\n      '           '\n          '   '\n\n\n}\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "mirror.css",
			"code": "body {\n  -moz-transform: scale(-1, 1);\n  -webkit-transform: scale(-1, 1);\n  -o-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n",
			"tags": []
		},
		{
			"name": "overconfidence.js",
			"code": "console.assert([0] != ![0]);\n\n// tags: wtf\n",
			"tags": [
				"wtf"
			]
		},
		{
			"name": "pick-your-poison.js",
			"code": "const poison = confirm(\n  'Pick Your Poison.\\n\\n- Iteration: [ok]\\n- Recursion: [cancel]',\n)\n  ? 'iterate'\n  : 'recurse';\n\nif (poison === 'iterate') {\n  while (true) {\n    console.log(poison);\n  }\n} else if (poison === 'recurse') {\n  (function bottomlessish() {\n    console.log(poison);\n    try {\n      bottomlessish();\n    } catch (_) {\n      bottomlessish();\n    }\n  })();\n} else {\n  (function eternival() {\n    const id = setInterval(() => (console.log(id), eternival()), 0);\n  })();\n}\n",
			"tags": []
		},
		{
			"name": "pipeable-alert.js",
			"code": "const alert = (thing) => (window.alert(thing?.toString()), thing);\n\nalert('a' + alert('l' + alert('e' + alert('r' + alert('t')))));\n\n// tags: useless\n",
			"tags": [
				"useless"
			]
		},
		{
			"name": "pipeable-log.js",
			"code": "const log = (thing) => (\n  console.groupCollapsed(thing), console.trace(), console.groupEnd(), thing\n);\n\nlog('l' + log('o' + log('g')));\n\n// tags: useful\n",
			"tags": [
				"useful"
			]
		},
		{
			"name": "potato-potato.js",
			"code": "function potato() {\n  return this instanceof potato ? this.__proto__.constructor : potato;\n}\n\nalert(`you say ${new potato().name}, I say ${potato().name}`);\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "python-by-any-other-name.js",
			"code": "def fib(n):\n  if n == 1 or n == 0:\n    return n\n  else:\n    return fib(n-2) + fib(n - 1)\n\nprint(fib(10))\n",
			"tags": []
		},
		{
			"name": "recurseval-1.js",
			"code": "eval((recurseval = 'eval(recurseval)'));\n\n// tags: useless\n",
			"tags": [
				"useless"
			]
		},
		{
			"name": "recurseval-2.js",
			"code": "(function recurseval() {\n  eval(`(${recurseval.toString()})()`);\n})();\n\n// tags: quine\n",
			"tags": [
				"quine"
			]
		},
		{
			"name": "recurseval-3.js",
			"code": "fetch(`./recurseval-3.js`)\n  .then((res) => res.text())\n  .then((code) => (console.log(code), eval(code)))\n  .catch(console.error);\n",
			"tags": []
		},
		{
			"name": "reflection.js",
			"code": "var w = 0;\n\nwhile (w < 3) {\n  w++;\n}\n\nalert(w);\n\n/*~~~~~~~~~~~~*/\n\nalert(m);\n\ndo {\n  m++;\n} while (m < 3);\n\nvar m = 0;\n",
			"tags": []
		},
		{
			"name": "sequitur.js",
			"code": "const sequitur = (non = '') => (non ? { [non]: sequitur } : sequitur);\n\nalert(sequitur('hi').hi('bye').bye()('sequitur').sequitur.name);\n\n// tags: useless, puzzle\n",
			"tags": [
				"useless",
				"puzzle"
			]
		},
		{
			"name": "steamroll.mjs",
			"code": "export const steamroll = (code = '', refactors = []) => {\n  const refactor = { goodCode: code };\n  refactors.push(refactor);\n\n  const sandbox = document.createElement('iframe');\n\n  sandbox.addEventListener('load', () => {\n    sandbox.contentWindow.addEventListener('error', ({ lineno, error }) => {\n      const lines = code.split('\\n');\n      (refactor.badCode = refactor.goodCode), delete refactor.goodCode;\n      refactor.error = error;\n      refactor.guilty = lines.splice(lineno - 1, 1).pop();\n\n      steamroll(lines.join('\\n'), refactors);\n    });\n\n    const fingersCrossed = document.createElement('script');\n    fingersCrossed.innerHTML = code;\n    sandbox.contentDocument.body.appendChild(fingersCrossed);\n  });\n\n  document.body.appendChild(sandbox);\n\n  return refactors;\n};\n\nexport default steamroll;\n\n// inspiration: https://github.com/mattdiamond/fuckitjs\n",
			"tags": []
		},
		{
			"name": "take-five.js",
			"code": "const FIVE_MINUTES = 300000; // milliseconds\n\nconst clock_out = Date.now();\n\nconst on_break = () => Date.now() - clock_out < FIVE_MINUTES;\n\nget_some_fresh_air: while (on_break()) {\n  alert('break time, take 5!');\n}\n\n// tags: wellbeing\n",
			"tags": [
				"wellbeing"
			]
		},
		{
			"name": "testing.mjs",
			"code": "import { describe, it } from './describe-it.mjs';\nimport { expect } from './expect.mjs';\n\nexport { describe, expect, it };\nexport default { describe, expect, it };\n\n// tags: testing\n",
			"tags": [
				"testing"
			]
		},
		{
			"name": "this-is-amazing.mjs",
			"code": "import { describe, it as _this, expect } from './testing.mjs';\n\nconst amazing = function wow() {\n  return this;\n}.bind('amazing');\n\ndescribe(\"this: it's amazing\", () => {\n  _this('is a string', () => {\n    const beAmazed = amazing();\n    expect(typeof beAmazed).toStrictEqual('string');\n  });\n  _this('is \"amazing\"', () => {\n    const beAmazed = amazing();\n    expect(beAmazed).toStrictEqual('amazing');\n  });\n});\n",
			"tags": []
		},
		{
			"name": "tintin-0.js",
			"code": "const tin = () => 'tin';\n\nconsole.log(tin.name);\nconsole.log(tin());\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-1.js",
			"code": "const tin = () => tin;\n\nconsole.log(tin().name);\nconsole.log(tin()()()()());\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-2.js",
			"code": "const tin = () => ({ tin });\n\nconsole.log(tin().tin.name);\nconsole.log(tin().tin().tin().tin);\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-3.js",
			"code": "const tin = () => tin;\ntin.tin = tin;\n\nconsole.log(tin[tin().name]()[tin.name].name);\nconsole.log(tin.tin()().tin().tin.tin()()().tin().tin.tin());\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-4.js",
			"code": "const tin = () => ({ tin });\ntin.tin = tin;\n\nconsole.log(tin[tin.name]().tin.tin.tin()['tin'].name);\nconsole.log(tin.tin()['tin']().tin().tin);\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "transparency.js",
			"code": "const transparency = {\n  remember_that: 'let',\n  stores: '=',\n  as_long_as: 'while',\n  is_less_than: '<',\n  add_one_to: '++',\n  show_me: 'alert',\n};\n\nwith (transparency) {\n  eval(`\n\n${remember_that} i ${stores} 0;\n\n${as_long_as}( i ${is_less_than} 5 )${add_one_to} i;\n\n${show_me}( i );\n\n`);\n}\n",
			"tags": []
		},
		{
			"name": "turtles-all-the-way-down.html",
			"code": "<title>turtles all the way down</title>\n\n<pre>\n  _____     ____\n /      \\  |  o |\n|        |/ ___\\|\n|_________/\n|_|_| |_|_|\n</pre>\n<!-- https://www.asciiart.eu/animals/reptiles/turtles -->\n\n<script id=\"bottom\">\n  const turtle = document.getElementsByTagName('pre')[0];\n  setInterval(() => bottom.before(turtle.cloneNode(true)));\n</script>\n",
			"tags": []
		},
		{
			"name": "turtles-all-the-way-down.js",
			"code": "(turtle = () => turtle())();\n\n// tags: pun\n",
			"tags": [
				"pun"
			]
		},
		{
			"name": "var-let-const.js",
			"code": "// 'use strict';\n\nconsole.assert(__ === let);\n\n{\n  var let = 'const';\n}\n\nconsole.assert(__ === let);\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "wait-for-it.js",
			"code": "(function waitForIt(wait = 0) {\n  console.log(wait);\n  wait = setTimeout(() => waitForIt(wait), wait);\n})();\n",
			"tags": []
		},
		{
			"name": "what-does-the-fox-say.js",
			"code": "theFoxSays('kwak', 'kwak', 'kwak');\n\nfunction theFoxSays(...args) {\n  // This looks like a fox, right?\n  // Taken from here - https://ascii.co.uk/art/fox\n  const fox = [\n    '%c%c',\n    '%c    _,-=._              /|_/|%c',\n    '%c`-.}       `=._,.-=-._.,  @ @._,%c',\n    \"%c   `._ _,-.   )      _,.-'%c\",\n    '%c           G.m-\"^m`m\\'%c',\n    '%c%c',\n  ];\n\n  // Gets args as a string\n  const joinedArgs = args.join(' ');\n\n  // Add the bubble if there is something to log!\n  if (joinedArgs.length > 0) {\n    fox[1] += `        ---${'-'.repeat(joinedArgs.length)}-`;\n    fox[2] += `  -(   ${joinedArgs}   )`;\n    fox[3] += `           ---${'-'.repeat(joinedArgs.length)}-`;\n  }\n\n  // Log the fox!\n  for (const line of fox) {\n    console.log(line, 'color: firebrick', '');\n  }\n}\n\n// credit: https://tholman.com/console-dot-frog/\n// tags: sketch\n",
			"tags": [
				"sketch"
			]
		},
		{
			"name": "yolo.js",
			"code": "const shipit = (motto = '') => {\n  try {\n    alert(eval(prompt(`${motto}!`)));\n  } catch (err) {\n    alert(`${err.name}: ${err.message}\\n\\n${motto}!`);\n    shipit(motto);\n  }\n};\n\nshipit('YOLO');\n\n// tags: yolo\n",
			"tags": [
				"yolo"
			]
		},
		{
			"name": "yoloer.js",
			"code": "/*\n  // 'use strict';\n*/\n\nconst YOLO = 'YOLO';\n\nconst walkTheTalk = (motto = YOLO) =>\n  prompt(`${motto}!`) || (alert(`${motto} harder!`), walkTheTalk(motto));\n\nconst shipit = (code = `\"${YOLO}!`) => {\n  try {\n    alert(eval(code));\n  } catch (err) {\n    alert(`${err.name}: ${err.message}\\n\\n${YOLO}!`);\n  } finally {\n    shipit(walkTheTalk(YOLO));\n  }\n};\n\nshipit(walkTheTalk(YOLO));\n\n// tags: yolo\n",
			"tags": [
				"yolo"
			]
		},
		{
			"name": "yoloest.js",
			"code": "alert(eval(prompt('YOLO!')));\n\n// tags: yolo\n",
			"tags": [
				"yolo"
			]
		}
	]
}