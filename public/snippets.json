{
	"tags": [
		"frivolous",
		"game",
		"minibrary",
		"puzzle",
		"quine",
		"reel",
		"remix",
		"sketch",
		"testing",
		"useful",
		"useless",
		"wellbeing",
		"wtfjs",
		"wuzzle",
		"yolo"
	],
	"snippets": [
		{
			"name": ".js",
			"code": "",
			"tags": []
		},
		{
			"name": "all-the-chars.js",
			"code": "const allTheChars = [];\n\nlet i = 0;\nlet next = '';\n\nwhile (!allTheChars.includes(next)) {\n  allTheChars.push(next);\n  next = String.fromCharCode(i++);\n}\n\nconsole.log(allTheChars.join(''));\n",
			"tags": []
		},
		{
			"name": "be.css",
			"code": ".belge,\n.belgisch,\n.belgian,\nbody {\n  background: linear-gradient(\n    90deg,\n    rgb(0, 0, 0) 33.33%,\n    rgb(255, 233, 54) 33.33%,\n    rgb(255, 233, 54) 66.66%,\n    rgb(255, 15, 33) 66.66%\n  );\n}\n",
			"tags": []
		},
		{
			"name": "be.de.txt",
			"code": "SSSSSSSGGGGGGGRRRRRRR\nSSSSSSSGGGGGGGRRRRRRR\nSSSSSSSGGGGGGGRRRRRRR\nSSSSSSSGGGGGGGRRRRRRR\nSSSSSSSGGGGGGGRRRRRRR\n",
			"tags": []
		},
		{
			"name": "be.fr.txt",
			"code": "NNNNNNNJJJJJJJRRRRRRR\nNNNNNNNJJJJJJJRRRRRRR\nNNNNNNNJJJJJJJRRRRRRR\nNNNNNNNJJJJJJJRRRRRRR\nNNNNNNNJJJJJJJRRRRRRR\n",
			"tags": []
		},
		{
			"name": "be.html",
			"code": "<!DOCTYPE html>\n<html lang=\"be\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>BE</title>\n  </head>\n  <body>\n    <div\n      style=\"\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around;\n        height: 100%;\n        width: 100%;\n      \"\n    >\n      <div style=\"background-color: black; height: 100%; width: 100%\"></div>\n      <div style=\"background-color: yellow; height: 100%; width: 100%\"></div>\n      <div style=\"background-color: red; height: 100%; width: 100%\"></div>\n    </div>\n  </body>\n</html>\n",
			"tags": []
		},
		{
			"name": "be.js",
			"code": "console.log('%c↺ 90°', 'font-weight: bold; font-size: xx-large;');\n\nfor (const color of ['black', 'yellow', 'red']) {\n  let bar = [];\n  for (let height = 0; height < 10; height++) {\n    let column = [];\n    for (let width = 0; width < 35; width++) {\n      column.push(' ');\n    }\n    bar.push(column);\n  }\n  console.log(\n    `%c${bar.flatMap((column) => column.join('')).join('\\n')}`,\n    `background-color: ${color};`,\n  );\n}\n",
			"tags": []
		},
		{
			"name": "be.nl.txt",
			"code": "ZZZZZZZGGGGGGGRRRRRRR\nZZZZZZZGGGGGGGRRRRRRR\nZZZZZZZGGGGGGGRRRRRRR\nZZZZZZZGGGGGGGRRRRRRR\nZZZZZZZGGGGGGGRRRRRRR\n",
			"tags": []
		},
		{
			"name": "be.svg",
			"code": "<svg version=\"1.1\" width=\"100%\" height=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n\n  <rect width=\"33.33%\" height=\"100%\" fill=\"black\" />\n\n  <rect width=\"33.33%\" height=\"100%\" fill=\"yellow\" x=\"33.33%\" />\n\n  <rect width=\"33.33%\" height=\"100%\" fill=\"red\" x=\"66.66%\" />\n\n</svg>\n",
			"tags": []
		},
		{
			"name": "callout-stack.js",
			"code": "const calloutStack = (msg = '') =>\n  eval(msg.split('').reduce((acc, next) => `(${next} = () => ${acc})()`, msg));\n\ncalloutStack('jenga');\n\n// tags: useless\n",
			"tags": [
				"useless"
			]
		},
		{
			"name": "can-not-even.mjs",
			"code": "import { describe, it } from './testing.mjs';\n\nconst canNotEven = (maybe, strict) =>\n  strict && typeof maybe !== 'number'\n    ? maybe\n    : maybe % 2 === 0\n    ? even(maybe)\n    : maybe;\n\ndescribe('canNotEven: can not even', () => {\n  describe('sort of', () => {\n    it('can odd numbers', () => canNotEven(1));\n    it('can odd strings', () => canNotEven('1'));\n    it('can odd number objects', () => canNotEven(new Number(1)));\n\n    it('can not even numbers', () => canNotEven(2));\n    it('can not even strings', () => canNotEven('2'));\n    it('can not even number objects', () => canNotEven(new Number(2)));\n  });\n  describe('exactly', () => {\n    it('can odd numbers', () => canNotEven(1, true));\n    it('can odd strings', () => canNotEven('1', true));\n    it('can even strings', () => canNotEven('2', true));\n    it('can odd number objects', () => canNotEven(new Number(1), true));\n    it('can even number objects', () => canNotEven(new Number(2), true));\n\n    it('can not even numbers', () => canNotEven(2, true));\n  });\n});\n\nfunction even(number) {\n  (function not() {\n    (function can() {\n      throw new Error(`can not ${number}`);\n    })();\n  })();\n}\n\n// tags: remix\n// inspiration: https://github.com/blakek/cannot-even\n",
			"tags": [
				"remix"
			]
		},
		{
			"name": "center.css",
			"code": "body {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n/* tags: useful */\n",
			"tags": [
				"useful"
			]
		},
		{
			"name": "cest-pas-faux.js",
			"code": "console.assert(this != false /* ouais */, \"c'est pas faux\");\n",
			"tags": []
		},
		{
			"name": "code-is-text.css",
			"code": ".token {\n  color: black !important;\n}\n",
			"tags": []
		},
		{
			"name": "declenche.html",
			"code": "<button id=\"déclenche\">once you start ...</button>\n\n<script>\n  déclenche.addEventListener('click', () => {\n    console.log('again');\n    déclenche.dispatchEvent(new Event('click'));\n  });\n</script>\n",
			"tags": []
		},
		{
			"name": "deep-compare.mjs",
			"code": "export const deepCompare = (actual, expect) => {\n  return (\n    actual === expect ||\n    Object.is(actual, expect) ||\n    (Object(actual) === actual &&\n      Object(expect) === expect &&\n      ((Array.isArray(actual) &&\n        Array.isArray(expect) &&\n        actual.length === expect.length &&\n        expect.every((expect, index) => deepCompare(actual[index], expect))) ||\n        (Object.keys(actual).length === Object.keys(expect).length &&\n          Object.keys(expect).every((key) =>\n            deepCompare(actual[key], expect[key]),\n          ))))\n  );\n};\n\nexport default deepCompare;\n\n// tags: useful, testing\n",
			"tags": [
				"useful",
				"testing"
			]
		},
		{
			"name": "describe-it.mjs",
			"code": "const _console_ = console;\n\nexport const describe = (name = '', testFunction = () => {}) => {\n  _console_.group(`%c${name}`, 'font-weight: bold;');\n  try {\n    testFunction();\n  } catch (err) {\n    _console_.error('%cSUITE ERROR:', 'font-weight: bold;', err);\n  }\n  _console_.groupEnd();\n};\n\nexport const it = (name = '', testFunction = () => {}) => {\n  const out = Object.assign({}, _console_);\n  const callOuts = [];\n  Object.keys(_console_).forEach(\n    (key) => (_console_[key] = (...args) => callOuts.push({ key, args })),\n  );\n  let thrown = null;\n  try {\n    testFunction();\n  } catch (err) {\n    thrown = err;\n  }\n  if (thrown)\n    out.groupCollapsed(`%c✖ FAIL: ${name}`, 'font-weight: bold; color: red;');\n  else\n    out.groupCollapsed(`%c√ PASS: ${name}`, 'font-weight: bold; color: green;');\n  callOuts.forEach((callOut) => out[callOut.key](...callOut.args));\n  thrown && out.error(thrown);\n  out.groupEnd(), Object.assign(_console_, out);\n};\n\nexport default { describe, it };\n\n// tags: testing, minibrary\n",
			"tags": [
				"testing",
				"minibrary"
			]
		},
		{
			"name": "dna.js",
			"code": "const WIDTH = 30;\nconst STEP = 0.08;\n\nconst coordinate = (num, phase = 0) =>\n  Math.round(Math.sin(num + phase) * WIDTH) + WIDTH;\n\nlet a = 0;\nlet b = WIDTH;\n\nconst strand = setInterval(() => {\n  const cA = coordinate((a += STEP));\n  const cB = coordinate((b += STEP), WIDTH / 2);\n  console.log(\n    `${Array((cA < cB ? cA : cB) + 1).join(' ')}{|${Array(\n      Math.abs(cB - cA),\n    ).join('=')}|}`,\n  );\n  if (a / b > 0.3) {\n    clearInterval(strand);\n  }\n}, 30);\n\n// tags: sketch\n",
			"tags": [
				"sketch"
			]
		},
		{
			"name": "do-without.js",
			"code": "const out = { eye_roll: '(◔_◔)' };\n\ndo {\n  with (out) {\n    alert(eye_roll);\n  }\n} while (null);\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "existential-void.js",
			"code": "/*\n  A: I disappear and leave you.\n  E: You didn’t disappear.\n  A: Well, I did and then appeared again. The void does not accept me, sir.\n*/\n\nconsole.assert(void 'me', 'the void accepts');\n",
			"tags": []
		},
		{
			"name": "expect.mjs",
			"code": "import deepCompare from './deep-compare.mjs';\n\nexport const expect = (first) => {\n  return {\n    toDeepEqual(second) {\n      if (!deepCompare(first, second)) {\n        console.log('%cFirst Thing:', 'font-weight: bold;', first);\n        console.log('%cSecond Thing:', 'font-weight: bold;', second);\n        throw new Error('the first thing did not deep equal the second thing.');\n      }\n    },\n    toStrictEqual(second) {\n      if (first !== second) {\n        console.log('%cFirst Thing:', 'font-weight: bold;', first);\n        console.log('%cSecond Thing:', 'font-weight: bold;', second);\n        throw new Error(\n          'the first thing did not strictly equal the second thing',\n        );\n      }\n    },\n  };\n};\n\nexport default expect;\n\n// tags: testing, minibrary\n",
			"tags": [
				"testing",
				"minibrary"
			]
		},
		{
			"name": "fake-it-till-you-make-it.mjs",
			"code": "import { steamroll } from './steamroll.mjs';\n\nfetch('./python-by-any-other-name.js')\n  .then((res) => res.text())\n  .then(steamroll)\n  .then(console.log)\n  .catch(console.error);\n\n// tags: frivolous\n",
			"tags": [
				"frivolous"
			]
		},
		{
			"name": "flashlight.css",
			"code": "* {\n  opacity: 0;\n  transition: opacity 0.5s ease;\n}\n\n*:hover {\n  opacity: 1;\n}\n",
			"tags": []
		},
		{
			"name": "funsole.mjs",
			"code": "import { theFoxSays } from './what-does-the-fox-say.mjs';\n\nexport default { theFoxSays };\n\n// tags: minibrary\n",
			"tags": [
				"minibrary"
			]
		},
		{
			"name": "goto-ish.js",
			"code": "var wants_a_compliment = confirm('do you want a compliment?');\n\ncompliment: {\n  insult: {\n    if (wants_a_compliment) break insult;\n    alert('you own a store');\n  }\n  if (!wants_a_compliment) break compliment;\n  alert('well done, good work');\n}\n",
			"tags": []
		},
		{
			"name": "gotta-fetch-em-all.js",
			"code": "fetch(\n  'https://raw.githubusercontent.com/PokeAPI/pokeapi/master/data/v2/csv/pokemon.csv',\n)\n  .then((res) => res.text())\n  .then((csv) =>\n    csv\n      .split('\\n')\n      .slice(1)\n      .map((line) => line.split(',')[1])\n      .join('\\n'),\n  )\n  .then(console.log)\n  .catch(console.error);\n",
			"tags": []
		},
		{
			"name": "heartbreak.js",
			"code": "heart: {\n  break heart;\n}\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "in-one-ear.js",
			"code": "// ... out the other\n\n// prettier-ignore\n{\n\n\n\n          '   '\n      '           '\n    '    (*) (*)    '\nalert(             prompt())\n    '       ^       '\n    '   \\_______/   '\n      '           '\n          '   '\n\n\n}\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "je-l-ignore.js",
			"code": "var combien = (function d_etages(y_a_t_il) {\n  try {\n    return d_etages(y_a_t_il + 1);\n  } catch (je_l_ignore) {\n    return y_a_t_il;\n  }\n})(0);\n\nconsole.log(\n  '\\n' +\n    'C’est l’histoire d’un homme qui tombe d’un immeuble de ' +\n    combien +\n    ' étages.' +\n    '\\n\\n' +\n    'Le mec, au fur et à mesure de sa chute, il se répète sans cesse pour se rassurer:' +\n    '\\n\\n',\n);\n\ntry {\n  (function la_chute(etage) {\n    console.log('étage ' + etage + ', jusqu’ici tout va bien.');\n    la_chute(etage - 1);\n  })(combien);\n} catch (l_importance) {\n  l_importance.message = 'c’est l’atterrissage.';\n  throw l_importance;\n} finally {\n  console.log('\\n' + \"Mais l'important n’est pas la chute,\" + '\\n\\n');\n}\n\n// credit: la haine\n",
			"tags": []
		},
		{
			"name": "kishu.txt",
			"code": "    k\n   i i\n  s i s\n h s s h\nu h s h u\n u h h u\n  u h u\n   u u\n    u\n",
			"tags": []
		},
		{
			"name": "la-trahison-de-l-ascii.js",
			"code": "/*\n  La Trahison de l'ASCII\n*/\n\n(function () {\n  console.assert(this != 'pipe');\n}).call(\n  `\n ___\n(__ '-._                _____\n   '-._ '-._          .'     '.\n       '-._ '-._     .=========.\n           '._ /'-..-          .\n              '-._             .\n                  '-.._______.'\n`,\n);\n\n// https://ascii.co.uk/art/pipe\n",
			"tags": []
		},
		{
			"name": "lenses.json",
			"code": "{\n  \"--port\": 3456,\n\n  \"study\": {\n    \"save\": true,\n    \"run\": true,\n    \"debug\": true,\n    \"openIn\": true,\n    \"variables\": true,\n    \"pseudo\": true,\n    \"clearScheduled\": true,\n    \"parsons\": false\n  }\n}\n",
			"tags": []
		},
		{
			"name": "mirror.css",
			"code": "body {\n  -moz-transform: scale(-1, 1);\n  -webkit-transform: scale(-1, 1);\n  -o-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n",
			"tags": []
		},
		{
			"name": "overconfidence.js",
			"code": "console.assert([0] != ![0]);\n\nconsole.assert('function () {}' != function () {});\n\n// tags: wtfjs\n",
			"tags": [
				"wtfjs"
			]
		},
		{
			"name": "pedestrian-slalom.html",
			"code": "<style>\n  .center {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n</style>\n\n<pre id=\"field\" class=\"center\"></pre>\n\n<script>\n  alert('use the arrow keys to change direction');\n\n  let dir = 'ArrowUp';\n  document.addEventListener('keyup', (e) => (dir = e.key));\n\n  const ped = () => (Math.random() < 0.25 ? '*' : ' ');\n  const move = {\n    ArrowRight: (b) => b.map((r) => [ped(), ...r.slice(0, 30)]),\n    ArrowLeft: (b) => b.map((r) => [...r.slice(1, 31), ped()]),\n    ArrowUp: (b) => [...b.slice(1), Array(31).fill(null).map(ped)],\n    ArrowDown: (b) => [Array(31).fill(null).map(ped), ...b.slice(0, 30)],\n  };\n\n  (function tick(ms = 0, b = []) {\n    const center = b[15][15] === '*' ? 'X' : 'O';\n    field.innerText = JSON.parse(JSON.stringify(b))\n      .map((r, i) => (i === 15 ? ((r[15] = center), r) : [...r]))\n      .flatMap((r) => r.join(' '))\n      .join('\\n');\n    ms <= 0 || center === 'X'\n      ? alert(`score: ${1000 - ms}`)\n      : setTimeout(tick, ms, ms - 5, move[dir](b));\n  })(1000, Array(31).fill(Array(31).fill(' ')));\n</script>\n\n<!-- tags: game -->\n",
			"tags": [
				"game"
			]
		},
		{
			"name": "pick-your-poison.js",
			"code": "const poison = confirm(\n  'Pick Your Poison.\\n\\n- Iteration: [ok]\\n- Recursion: [cancel]',\n)\n  ? 'iterate'\n  : 'recurse';\n\nif (poison === 'iterate') {\n  while (true) {\n    console.log(poison);\n  }\n} else if (poison === 'recurse') {\n  (function bottomlessish() {\n    console.log(poison);\n    try {\n      bottomlessish();\n    } catch (_) {\n      bottomlessish();\n    }\n  })();\n} else {\n  (function exponterval() {\n    const id = setInterval(() => (console.log(id), exponterval()));\n  })();\n}\n",
			"tags": []
		},
		{
			"name": "pipeable-alert.js",
			"code": "const alert = (thing) => (window.alert(thing?.toString()), thing);\n\nalert('a' + alert('l' + alert('e' + alert('r' + alert('t')))));\n\n// tags: useless\n",
			"tags": [
				"useless"
			]
		},
		{
			"name": "pipeable-log.js",
			"code": "const log = (thing) => (\n  console.groupCollapsed(thing), console.trace(), console.groupEnd(), thing\n);\n\nlog('l' + log('o' + log('g')));\n\n// tags: useful\n",
			"tags": [
				"useful"
			]
		},
		{
			"name": "potato-potato.js",
			"code": "function potato() {\n  return this instanceof potato ? this.__proto__.constructor : potato;\n}\n\nalert(`you say ${new potato().name}, I say ${potato().name}`);\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "projector.mjs",
			"code": "const defaultConfig = {\n  args: [],\n  frameRate: 50,\n  maxTime: Infinity,\n  maxFrames: Infinity,\n};\n\nconst project = (frame) =>\n  Array.isArray(frame) ? console.log(...frame) : console.log(frame);\n\nexport default function projector(reel, userConfig = {}) {\n  const config = Object.assign({}, defaultConfig, userConfig);\n  const spool = reel();\n\n  let frames = 0;\n  let time = 0;\n  let intervalId;\n  const unspool = () => {\n    const frame = spool.next();\n    if (frame.done || time > config.maxTime || frames > config.maxFrames) {\n      clearInterval(intervalId);\n    } else {\n      console.clear();\n      if (Array.isArray(frame.value)) {\n        frame.value.forEach(project);\n      } else {\n        project(frame.value);\n      }\n      frames++;\n      time += config.frameRate;\n    }\n  };\n\n  intervalId = setInterval(unspool, config.frameRate, ...config.args);\n}\n\n// tags: minibrary\n",
			"tags": [
				"minibrary"
			]
		},
		{
			"name": "python-by-any-other-name.js",
			"code": "def fib(n):\n  if n == 1 or n == 0:\n    return n\n  else:\n    return fib(n-2) + fib(n - 1)\n\nprint(fib(10))\n",
			"tags": []
		},
		{
			"name": "rainbowing.html",
			"code": "<style>\n  #rain {\n    display: grid;\n    grid-template-columns: repeat(100, 1vw);\n    grid-template-rows: repeat(100, 1vh);\n  }\n</style>\n\n<div id=\"rain\"></div>\n\n<script>\n  // https://krazydad.com/tutorials/makecolors.php\n  const colorVal = (steps, shift) =>\n    Math.round(Math.sin(0.2 * steps + shift) * 127 + 128);\n  const cycleColor = (steps) =>\n    `rgb(${colorVal(steps, 0)},${colorVal(steps, 2)},${colorVal(steps, 4)})`;\n\n  for (let i = 0; i < 10000; i++) {\n    let steps = 0;\n    let isChanging = true;\n    const bow = document.createElement('div');\n    bow.addEventListener('click', () => (isChanging = !isChanging));\n    setInterval(\n      () => isChanging && (bow.style.backgroundColor = cycleColor(steps++)),\n      500,\n    );\n    rain.appendChild(bow);\n  }\n</script>\n",
			"tags": []
		},
		{
			"name": "rainstorm.mjs",
			"code": "import projector from './projector.mjs';\n\n// https://www.asciiart.eu/nature/clouds\nconst cloud = `\n            .-~~~-.\n    .- ~ ~-(       )_ _\n   /                    ~ -.\n  |                          ',\n   \\\\                         .'\n     ~- ._ ,. ,.,.,., ,.. -~`;\n//  https://ascii.co.uk/art/lightning\nconst lightning = `${`\n                  ,/\n                ,'/\n              ,' /\n            ,'  /_____,\n         .'____    ,'\n             /  ,'\n            / ,'\n           /,'\n          /'`}${Array(21).fill('\\n').join('')}`;\nconst ground = `___.-------._____/¯¯¯¯¯¯\\`----,____`;\n\nconst drop = () => (Math.random() < 0.2 ? ',' : ' ');\nconst row = () => [' ', ' ', ...Array(13).fill(' ').map(drop)];\n\nfunction* rainstorm(rain = Array(31).fill('').map(row)) {\n  while (rainstorm) {\n    rain.pop(), rain.unshift(row());\n    const flash = Math.random() < 0.1;\n    yield [\n      [`%c${cloud}`, `color: ${flash ? 'lightgrey' : 'grey'};`],\n      flash\n        ? [`%c${lightning}`, 'color: orange;']\n        : [`%c${rain.flatMap((r) => r.join(' ')).join('\\n')}`, 'color: blue;'],\n      [`%c${ground}`, `color: ${flash ? 'lightgreen' : 'green'};`],\n    ];\n  }\n}\nprojector(rainstorm, { frameRate: 400, maxFrames: 100 });\n\n// tags: reel, sketch\n",
			"tags": [
				"reel",
				"sketch"
			]
		},
		{
			"name": "recurseval-1.js",
			"code": "eval((recurseval = 'eval(recurseval)'));\n\n// tags: useless\n",
			"tags": [
				"useless"
			]
		},
		{
			"name": "recurseval-2.js",
			"code": "(function recurseval() {\n  eval(`(${recurseval.toString()})()`);\n})();\n\n// tags: quine\n",
			"tags": [
				"quine"
			]
		},
		{
			"name": "recurseval-3.js",
			"code": "fetch(`./recurseval-3.js`)\n  .then((res) => res.text())\n  .then((code) => (console.log(code), eval(code)))\n  .catch(console.error);\n",
			"tags": []
		},
		{
			"name": "reflection.css",
			"code": "body {\n  -moz-transform: scale(1, -1);\n  -webkit-transform: scale(1, -1);\n  -o-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1);\n}\n",
			"tags": []
		},
		{
			"name": "reflection.js",
			"code": "var w = 0;\n\nwhile (w < 3) {\n  w++;\n}\n\nalert(w);\n\n/*~~~~~~~~~~~~*/\n\nalert(m);\n\ndo {\n  m++;\n} while (m < 3);\n\nvar m = 0;\n",
			"tags": []
		},
		{
			"name": "sequitur.js",
			"code": "const sequitur = (non = '') => (non ? { [non]: sequitur } : sequitur);\n\nalert(sequitur('hi').hi('bye').bye()('sequitur').sequitur.name);\n\n// tags: useless, puzzle\n",
			"tags": [
				"useless",
				"puzzle"
			]
		},
		{
			"name": "sierpinski.html",
			"code": "<link rel=\"stylesheet\" href=\"./center.css\" />\n\n<canvas id=\"t-pad\" height=\"1000\" width=\"1000\"></canvas>\n\n<script type=\"module\">\n  import turtlje from './turtlje.mjs';\n  const { left, right, forward, goto } = turtlje('t-pad');\n\n  goto(150, 0);\n  halfSierpinski(3, 5);\n  right(90).forward(3).right(90);\n  halfSierpinski(3, 5);\n\n  function halfSierpinski(size, level) {\n    if (level <= 0) {\n      forward(size);\n    } else {\n      part(size, level);\n      right(90).forward(size).right(90);\n      part(size, level);\n    }\n  }\n\n  function part(size, level) {\n    halfSierpinski(size, level - 1);\n    left(45)\n      .forward(size * Math.SQRT2)\n      .left(45);\n    halfSierpinski(size, level - 1);\n  }\n</script>\n\n<!-- tags: sketch -->\n<!-- credit: https://github.com/bjpop/js-turtle/blob/master/examples/sierpinski.js -->\n",
			"tags": [
				"sketch"
			]
		},
		{
			"name": "steamroll.mjs",
			"code": "export const steamroll = (code = '', refactors = []) => {\n  const refactor = { goodCode: code };\n  refactors.push(refactor);\n\n  const sandbox = document.createElement('iframe');\n\n  sandbox.addEventListener('load', () => {\n    sandbox.contentWindow.addEventListener('error', ({ lineno, error }) => {\n      const lines = code.split('\\n');\n      (refactor.badCode = refactor.goodCode), delete refactor.goodCode;\n      refactor.error = error;\n      refactor.guilty = lines.splice(lineno - 1, 1).pop();\n\n      steamroll(lines.join('\\n'), refactors);\n    });\n\n    const fingersCrossed = document.createElement('script');\n    fingersCrossed.innerHTML = code;\n    sandbox.contentDocument.body.appendChild(fingersCrossed);\n  });\n\n  document.body.appendChild(sandbox);\n\n  return refactors;\n};\n\nexport default steamroll;\n\n// tags: remix\n// inspiration: https://github.com/mattdiamond/fuckitjs\n",
			"tags": [
				"remix"
			]
		},
		{
			"name": "story-in-a-story.mjs",
			"code": "const storyInAStory = async (narrativeTitle = '') => {\n  console.group(`%c${narrativeTitle}`, 'font-weight: bold;');\n  try {\n    await import(narrativeTitle);\n  } catch (err) {\n    console.error(err);\n  }\n  console.groupEnd();\n};\n\nexport { storyInAStory };\nexport default storyInAStory;\n\n// tags: minibrary\n",
			"tags": [
				"minibrary"
			]
		},
		{
			"name": "take-five.js",
			"code": "const FIVE_MINUTES = 300000; // milliseconds\n\nconst clock_out = Date.now();\n\nconst on_break = () => Date.now() - clock_out < FIVE_MINUTES;\n\nget_some_fresh_air: while (on_break()) {\n  alert('break time, take 5!');\n}\n\n// tags: wellbeing\n",
			"tags": [
				"wellbeing"
			]
		},
		{
			"name": "testing.mjs",
			"code": "import { describe, it } from './describe-it.mjs';\nimport { expect } from './expect.mjs';\n\nexport { describe, expect, it };\nexport default { describe, expect, it };\n\n// tags: testing, minibrary\n",
			"tags": [
				"testing",
				"minibrary"
			]
		},
		{
			"name": "this-is-amazing.mjs",
			"code": "import { describe, it as _this, expect } from './testing.mjs';\n\nconst amazing = function wow() {\n  return this;\n}.bind('amazing');\n\ndescribe(\"this: it's amazing\", () => {\n  _this('is a string', () => {\n    const beAmazed = amazing();\n    expect(typeof beAmazed).toStrictEqual('string');\n  });\n  _this('is \"amazing\"', () => {\n    const beAmazed = amazing();\n    expect(beAmazed).toStrictEqual('amazing');\n  });\n});\n",
			"tags": []
		},
		{
			"name": "tintin-0.js",
			"code": "const tin = () => 'tin';\n\nconsole.log(tin.name);\nconsole.log(tin());\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-1.js",
			"code": "const tin = () => tin;\n\nconsole.log(tin().name);\nconsole.log(tin()()()()());\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-2.js",
			"code": "const tin = () => ({ tin });\n\nconsole.log(tin().tin.name);\nconsole.log(tin().tin().tin().tin);\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-3.js",
			"code": "const tin = () => tin;\ntin.tin = tin;\n\nconsole.log(tin[tin().name]()[tin.name].name);\nconsole.log(tin.tin()().tin().tin.tin()()().tin().tin.tin());\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "tintin-4.js",
			"code": "const tin = () => ({ tin });\ntin.tin = tin;\n\nconsole.log(tin[tin.name]().tin.tin.tin()['tin'].name);\nconsole.log(tin.tin()['tin']().tin().tin);\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "transparency.js",
			"code": "const transparency = {\n  remember_that: 'let',\n  stores: '=',\n  as_long_as: 'while',\n  is_less_than: '<',\n  add_one_to: '++',\n  show_me: 'alert',\n};\n\nwith (transparency) {\n  eval(`\n\n${remember_that} i ${stores} 0;\n\n${as_long_as}( i ${is_less_than} 5 )${add_one_to} i;\n\n${show_me}( i );\n\n`);\n}\n",
			"tags": []
		},
		{
			"name": "turtles-all-the-way-down.html",
			"code": "<title>turtles all the way down</title>\n\n<pre>\n  _____     ____\n /      \\  |  o |\n|        |/ ___\\|\n|_________/\n|_|_| |_|_|\n</pre>\n\n<script id=\"down\">\n  const turtle = document.getElementsByTagName('pre')[0];\n  setInterval(() => down.before(turtle.cloneNode(true)));\n</script>\n\n<!-- turtle: https://www.asciiart.eu/animals/reptiles/turtles -->\n<!-- tags: wuzzle -->\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "turtles-all-the-way-down.js",
			"code": "(turtle = () => turtle())();\n\n// tags: wuzzle\n",
			"tags": [
				"wuzzle"
			]
		},
		{
			"name": "turtlje.mjs",
			"code": "export default function turtlje(c = document.createElement('canvas')) {\n  c = typeof c === 'string' ? document.getElementById(c) : c;\n  const pad = c.getContext('2d');\n\n  const s = { col: 'black', width: 1, deg: 0, x: c.width / 2, y: c.height / 2 };\n\n  const turtle = {\n    backward: (pixels) => forward(-pixels),\n    color: (col) => ((s.col = col), turtle),\n    dot: (diameter) => (\n      pad.beginPath(),\n      pad.arc(s.x, s.y, diameter / 2, 0, 2 * Math.PI),\n      (pad.fillStyle = s.col),\n      (pad.lineWidth = s.width),\n      pad.fill(),\n      turtle\n    ),\n    forward: (pixels) => (\n      pad.beginPath(),\n      pad.moveTo(s.x, s.y),\n      pad.lineTo(\n        (s.x += -Math.cos((s.deg / 180) * Math.PI) * pixels),\n        (s.y += -Math.sin((s.deg / 180) * Math.PI) * pixels),\n      ),\n      (pad.strokeStyle = s.col),\n      (pad.lineWidth = s.width),\n      pad.stroke(),\n      turtle\n    ),\n    goto: (x, y) => ((s.x = x + c.width / 2), (s.y = y + c.height / 2), turtle),\n    left: (deg) => turtle.right(-deg),\n    right: (deg) => ((s.deg = (deg + s.deg) % 360), turtle),\n    width: (pixels) => ((s.width = pixels), turtle),\n  };\n\n  return { ...turtle, state: s, pad };\n}\n\n// tags: minibrary\n",
			"tags": [
				"minibrary"
			]
		},
		{
			"name": "var-let-const.js",
			"code": "// 'use strict';\n\nconsole.assert(__ === let);\n\n{\n  var let = 'const';\n}\n\nconsole.assert(__ === let);\n\n// tags: puzzle\n",
			"tags": [
				"puzzle"
			]
		},
		{
			"name": "wait-for-it.js",
			"code": "(function waitForIt(wait = 0) {\n  console.log(wait);\n  wait = setTimeout(() => waitForIt(wait), wait);\n})();\n",
			"tags": []
		},
		{
			"name": "what-does-the-fox-say.mjs",
			"code": "// This looks like a fox, right?\n// Taken from here - https://ascii.co.uk/art/fox\nconst fox = [\n  '%c',\n  '%c    _,-=._              /|_/|',\n  '%c`-.}       `=._,.-=-._.,  @ @._,',\n  \"%c   `._ _,-.   )      _,.-'\",\n  '%c           G.m-\"^m`m\\'',\n  '%c',\n];\n\nexport const theFoxSays = (...args) => {\n  // Gets args as a string\n  const joinedArgs = args.join(' ');\n\n  // Add the bubble if there is something to log!\n  if (joinedArgs.length > 0) {\n    fox[1] += `        ---${'-'.repeat(joinedArgs.length)}-`;\n    fox[2] += `  -(   ${joinedArgs}   )`;\n    fox[3] += `           ---${'-'.repeat(joinedArgs.length)}-`;\n  }\n\n  // Log the fox!\n  for (const line of fox) {\n    console.log(line, 'color: firebrick');\n  }\n};\n\nexport default theFoxSays;\n\n// tags: sketch, remix\n// inspiration: https://tholman.com/console-dot-frog/\n",
			"tags": [
				"sketch",
				"remix"
			]
		},
		{
			"name": "yolo.js",
			"code": "const shipit = (motto = '') => {\n  try {\n    alert(eval(prompt(`${motto}!`)));\n  } catch (err) {\n    alert(`${err.name}: ${err.message}\\n\\n${motto}!`);\n    shipit(motto);\n  }\n};\n\nshipit('YOLO');\n\n// tags: yolo\n",
			"tags": [
				"yolo"
			]
		},
		{
			"name": "yoloer.js",
			"code": "/*\n  // 'use strict';\n*/\n\nconst YOLO = 'YOLO';\n\nconst walkTheTalk = (motto = YOLO) =>\n  prompt(`${motto}!`) || (alert(`${motto} harder!`), walkTheTalk(motto));\n\nconst shipit = (code = `\"${YOLO}!`) => {\n  try {\n    alert(eval(code));\n  } catch (err) {\n    alert(`${err.name}: ${err.message}\\n\\n${YOLO}!`);\n  } finally {\n    shipit(walkTheTalk(YOLO));\n  }\n};\n\nshipit(walkTheTalk(YOLO));\n\n// tags: yolo\n",
			"tags": [
				"yolo"
			]
		},
		{
			"name": "yoloest.js",
			"code": "alert(eval(prompt('YOLO!')));\n\n// tags: yolo\n",
			"tags": [
				"yolo"
			]
		}
	]
}